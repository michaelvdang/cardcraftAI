

TODOs:
- Update features to allow 1 card gens per day, Pro free to 5 with publish right, and Ultimate to use real payment without 500 char limit
- Unpublish function not working, eg Espn, insufficient permission
- finish testing public and public/view pages 
- Move Public page to Home, move Pricing and Features somewhere else, change Home CTA to open flashcards?
- Add animation or hover effect to drawer menu 
- Review code for appbar, burger menu, drawer

DONE:
- Check why some styles do not work when deployed, MUI styles is rendered in footer in production while global styles are rendered in header. 
- Restyle /generate page
- Fix webhook1234 to update database with user subscription tier
- add stripe customerId to firestore 
- use webhook to update user subscription type in firestore
- Finish adding the listener to app to update subscription tier, find out where to put the listener useUserSubscription
- Add Publish button to page for Pro users, added publish function for pro users 



GUIDE:
- to run local webhook:
  - stripe listen --forward-to localhost:3000/webhook1234
  - stripe trigger payment_intent.succeeded

OVERVIEW:
Stripe API webhook:
Data flow:
- UI: Customer (logged in) creates checkout session by clicking on a purchase button, passing in priceId, email, userId 
  - priceId: to create session purchasing this item
  - email: to create a stripe customerId if it doesn't aleady exists in firestore 
  - userId: to look up customerId in firestore to keep stripe clean 
- Server: 
  - check if user exists in firestore, create if not 
  - check if user has stripe_customer_id field 
    - if yes, retrieve stripe_customer_id
    - if no, create new stripe customer, get stripe_customer_id
  - create checkout session like in the file, use the stripe_customer_id to pre-populate customer details in the checkout page 
  - DONE -> user is pushed to checkout page to finish
  - (user finishes checkout and pay) -> user is pushed to /results?session_id=<session_id>
  - hook in /results will wait and listen for update from server 
  - if all goes smooth, server will send event to /results to update the user object in app to new subscriptionTier
  - DONE

  Dev:
  - To run the above data flow locally, start the local webhook like above 
  - The sent event will not have the correct customerId in firestore, to to webhook1234/route.js and change the targetCustomerId value to one that is in firestore 
  - Watch the subscriptions field in user's firestore document get appended with new subscription


